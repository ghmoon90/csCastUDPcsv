using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Xml.Linq;

class CsvUdpSender
{
    // Cast value based on the type defined in XML
    static string CastValue(string value, string type)
    {
        try
        {
            switch (type.ToLower())
            {
                case "int":
                    return int.Parse(value).ToString();
                case "float":
                    return float.Parse(value).ToString();
                case "double":
                    return double.Parse(value).ToString();
                case "byte":
                    return byte.Parse(value).ToString();
                case "boolean":
                    bool boolValue;
                    if (value == "1" || value.ToLower() == "true")
                        boolValue = true;
                    else if (value == "0" || value.ToLower() == "false")
                        boolValue = false;
                    else
                        throw new FormatException("Invalid boolean format");
                    return boolValue.ToString();
                case "char":
                    return value.Length > 0 ? value[0].ToString() : "";
                default:
                    return value; // Treat as string if type is unknown
            }
        }
        catch
        {
            return type == "int" || type == "byte" ? "0" :
                   type == "float" || type == "double" ? "0.0" :
                   type == "boolean" ? "false" :
                   type == "char" ? " " : ""; // Default fallback values
        }
    }

    // Read CSV file and return a list of rows (each row is a list of strings)
    static List<List<string>> ReadCsv(string csvFilePath)
    {
        var csvData = new List<List<string>>();
        using (var reader = new StreamReader(csvFilePath))
        {
            while (!reader.EndOfStream)
            {
                var line = reader.ReadLine();
                var values = line.Split(',').ToList();
                csvData.Add(values);
            }
        }
        return csvData;
    }

    // Parse XML file to get the data types for each column
    static List<string> ParseXml(string xmlFilePath)
    {
        var dataTypes = new List<string>();
        var xmlDoc = XDocument.Load(xmlFilePath);
        var columns = xmlDoc.Descendants("Column");

        foreach (var column in columns)
        {
            dataTypes.Add(column.Value);
        }
        return dataTypes;
    }

    // Send a row over UDP
    static void SendRowUdp(List<string> row, string destinationIp, int destinationPort)
    {
        using (var udpClient = new UdpClient())
        {
            var message = string.Join(",", row); // Create a comma-separated row string
            var data = Encoding.UTF8.GetBytes(message);
            udpClient.Send(data, data.Length, destinationIp, destinationPort);
        }
    }

    static void Main(string[] args)
    {
        if (args.Length < 4)
        {
            Console.WriteLine("Usage: CsvUdpSender <csv file> <destination IP> <destination port>");
            return;
        }

        string csvFilePath = args[0];
        string destinationIp = args[1];
        int destinationPort = int.Parse(args[2]);

        // Step 1: Read the CSV file
        var csvData = ReadCsv(csvFilePath);
        if (csvData.Count == 0)
        {
            Console.WriteLine("Error: CSV file is empty or could not be read.");
            return;
        }

        // Step 2: Parse the XML file to get data types for each column
        var dataTypes = ParseXml("CastType.xml");
        if (dataTypes.Count == 0)
        {
            Console.WriteLine("Error: Could not read data types from XML.");
            return;
        }

        // Step 3: Cast each value and send each row over UDP
        foreach (var row in csvData)
        {
            var castedRow = new List<string>();
            for (int i = 0; i < row.Count; i++)
            {
                string castedValue = CastValue(row[i], i < dataTypes.Count ? dataTypes[i] : "string");
                castedRow.Add(castedValue);
            }

            // Send the casted row via UDP
            SendRowUdp(castedRow, destinationIp, destinationPort);
        }

        Console.WriteLine("Data sent successfully.");
    }
}
